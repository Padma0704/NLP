class TopDownParser:
    def __init__(self, grammar, start_symbol):
        self.grammar = grammar
        self.start_symbol = start_symbol

    def parse(self, sentence):
        self.sentence = sentence
        self.pos = 0
        return self._parse(self.start_symbol)

    def _parse(self, symbol):
        if self.pos == len(self.sentence):
            return False
        if symbol not in self.grammar:
            if self.pos < len(self.sentence) and symbol == self.sentence[self.pos]:
                self.pos += 1
                return True
            return False
        for production in self.grammar[symbol]:
            save_pos = self.pos
            if all(self._parse(s) for s in production):
                return True
            self.pos = save_pos
        return False


grammar = {
    'S': [['NP', 'VP']],
    'NP': [['Det', 'N']],
    'VP': [['V', 'NP']],
    'Det': [['the'], ['a']],
    'N': [['cat'], ['dog']],
    'V': [['chased'], ['saw']]
}

sentence = ['the', 'cat', 'chased', 'a', 'dog']
parser = TopDownParser(grammar, 'S')

print("Parsed" if parser.parse(sentence) else "Parsing failed")
