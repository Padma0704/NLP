class EarleyParser:
    def __init__(self, grammar):
        self.grammar = grammar
        self.start_symbol = next(iter(grammar))  # Assume the start symbol is the first non-terminal

    def parse(self, sentence):
        n = len(sentence)
        chart = [[] for _ in range(n + 1)]  # Create a chart with n+1 positions

        # Add the initial state
        chart[0].append(('S', 0, 0))  # ('S' -> ., 0, 0) - Start symbol with dot at the beginning

        # Process each position in the input sentence
        for i in range(n + 1):
            for state in chart[i]:
                self.predict(i, state, chart)
                self.scan(i, state, sentence, chart)
                self.complete(i, state, chart)

        return chart

    def predict(self, i, state, chart):
        lhs, dot_pos, _ = state
        # Modification: Check if lhs is in grammar keys, and grammar[lhs] is a list
        if lhs in self.grammar and isinstance(self.grammar[lhs], list) and dot_pos < len(self.grammar[lhs]):  
            for production in self.grammar[lhs][dot_pos:dot_pos + 1]:  
                # Modification: if the production is a list (a rule) append to chart
                #  Otherwise, check if it's a terminal
                if isinstance(production, list):
                    chart[i].append((production[0], 0, i)) # start dot for new production
                else:  # Terminal symbol
                    chart[i].append((production, 0, i))

    def scan(self, i, state, sentence, chart):
        lhs, dot_pos, _ = state
        # Modification: Check if lhs is in grammar and dot_pos is within range
        if lhs in self.grammar and isinstance(self.grammar[lhs], list) and dot_pos < len(self.grammar[lhs]):  
            terminal = sentence[i] if i < len(sentence) else None # safe guard in case i == len(sentence)
            rule = self.grammar[lhs][dot_pos] if dot_pos < len(self.grammar[lhs]) else None  
            if terminal == rule:
                chart[i + 1].append((lhs, dot_pos + 1, i))

    def complete(self, i, state, chart):
        lhs, dot_pos, _ = state
        # Modification: Check if lhs is in grammar and is a list
        if lhs in self.grammar and isinstance(self.grammar[lhs], list) and dot_pos == len(self.grammar[lhs]):  
            for rule in chart[state[2]]:
                chart[i].append(rule)
        

# Grammar: S -> NP VP, NP -> Det N, VP -> V NP, Det -> 'the' | 'a', N -> 'cat' | 'dog', V -> 'chased' | 'saw'
grammar = {
    'S': [['NP', 'VP']],
    'NP': [['Det', 'N']],
    'VP': [['V', 'NP']],
    'Det': ['the', 'a'],
    'N': ['cat', 'dog'],
    'V': ['chased', 'saw']
}

sentence = ['the', 'cat', 'chased', 'a', 'dog']
parser = EarleyParser(grammar)

chart = parser.parse(sentence)

# Print the parse chart
for i, states in enumerate(chart):
    print(f"State {i}: {states}")
